* Orgmode.nvim config
  
** Actual orgmode.nvim configuration
   :PROPERTIES:
   :TANGLE: lua/user/org.lua
   :END:
   Here I've written the basic configuration to setup both Orgmode
   and its treesitter grammar.
   Originally, I've inserted a custom mapping for toggling checkbox, but thanks
   to my further customization it's not necessary anymore

   #+begin_src lua :tangle test.lua
   -- Load custom tree-sitter grammar for org filetype
   require('orgmode').setup_ts_grammar()

   require('orgmode').setup({
       org_agenda_files = {'~/Dropbox/org/*', '~/org/**/*'},
       org_default_notes_file = '~/Dropbox/org/notes.org',
   })
   #+end_src
 
** Add "Enter" as a multipurpose mapping
   :PROPERTIES:
   :TANGLE: lua/user/org.lua
   :END:
   This is a piece of code that will make use of the "Enter" key while on normal
   mode to activate some org actions. This match more closely what happens in emacs
   and can also be easily customized.

   First of all, let's setup a function that will be used to identify org links, since
   I can't use treesitter for that.

   #+begin_src lua
   local org_mappings = require('orgmode.org.mappings')

   -- This function will be used instead of treesitter to find links
   local find_link = function ()
       return org_mappings._get_link_under_cursor()
   end
   #+end_src

   Now, let's create a table that will handle, in order of insertion, all the possible
   actions that should be handled by the "Enter" key in different situations.
   The key of this table should be a Treesitter node type (it's easy to find using the
   treesitter playground plugin) or a function that will return `nil` if it doesn't find 
   what it is supposed to represent, otherwise it doesn't really matter what it returns, but
   it must return something.

   #+begin_src lua
   local type_to_action = {
       [find_link] = "org_mappings.open_at_point",
       timestamp = "org_mappings.change_date",
       headline = "org_mappings.todo_next_state",
       listitem = "org_mappings.toggle_checkbox",
       list = "org_mappings.toggle_checkbox",
       _default = "org_mappings.open_at_point"
   }
   #+end_src

   Now, these are all the functions that I'll be using to check the type and
   execute the relevant command.

   #+begin_src lua
   local function get_action_from_type()
       local ts_utils = require('nvim-treesitter.ts_utils')
       local cur_node = ts_utils.get_node_at_cursor()
       local cur_row = cur_node:range()


       while cur_node ~= nil do
           local nodetype = cur_node:type()

           for identifier, action in pairs(type_to_action) do
               if type(identifier) == "function" then
                   if identifier() ~= nil then
                       return action
                   end
               elseif nodetype == identifier and identifier ~= "_default" then
                   return action
               end
           end

           cur_node = cur_node:parent()
           if cur_node == nil then
               break
           elseif cur_node:range() ~= cur_row then
               break
           end
       end

       return type_to_action._default
   end

   local function toggle_org_item()
       local org = require('orgmode')

       local action = get_action_from_type()

       if action ~= nil then
           org.action(action)
       end
   end
   #+end_src

** Add Tangling functionality to Org
   :PROPERTIES:
   :TANGLE: lua/user/org.lua
   :END:

   Using treesitter, get all code blocks within sections that have a special
   *:TANGLE:* property and extract this code into a file when a command is 
   typed.

   #+begin_src lua
   local query = vim.treesitter.query
   local files = nil
   
   local fix_indentation = function (str, min_spaces)
       if min_spaces == nil then
           min_spaces = 1000
       end
   
       for spaces in string.gmatch(str, "\n([ \t]+)") do
           if min_spaces > #spaces then
               min_spaces = #spaces
           end
       end
   
       local pattern = "\n"
       pattern = pattern .. string.rep("[ \t]", min_spaces)
   
       local indented = string.gsub(str, pattern, "\n")
       return indented
   end
   
   local save_into_files = function ()
       for filename, code_blocks in pairs(files) do
           -- Without expanding the file will be nil
           local file = io.open(vim.fn.expand(filename), "w+")
           io.output(file)
           for _, block in ipairs(code_blocks) do
               io.write(block .. "\n\n")
           end
           io.close(file)
       end
   end
   
   -- necessary for recursion in this case
   local process_node = nil
   process_node = function (node, cur_file)
       if node == nil then
           return
       end
   
       for subnode in node:iter_children() do
           local t = subnode:type()
           -- If the node is a block, try to tangle if necessary
           if t == "block" then
               if cur_file ~= nil then
                   if files[cur_file] == nil then
                       files[cur_file] = {}
                   end
   
                   for block_prop in subnode:iter_children() do
                       if block_prop:type() == "contents" then
                           local _, col = block_prop:range()
                           table.insert(files[cur_file], fix_indentation(query.get_node_text(block_prop, 0), col))
                       end
                   end
               end
           -- It was necessary to start from property_drawer, in order to
           -- pass "cur_file" to the node inside the section body
           elseif t == "property_drawer" then
               for drawer_child in subnode:iter_children() do
                   if drawer_child:type() == "property" then
                       local is_tangle = false
                       -- Look for the property name and value
                       for prop_part in drawer_child:iter_children() do
                           local prop_type = prop_part:type()
                           local prop_text = query.get_node_text(prop_part, 0)
                           if prop_type == "expr" and prop_text == "TANGLE" then
                               is_tangle = true
                           elseif prop_type == "value" and is_tangle then
                               cur_file = prop_text
                               is_tangle = false
                           end
                       end
                   end
               end
           else
               process_node(subnode, cur_file)
           end
       end
   end
   
   local tangle = function ()
       files = {}
   
       local language_tree = vim.treesitter.get_parser(0)
       local syntax_tree = language_tree:parse()
       local root = syntax_tree[1]:root()
   
       process_node(root, nil)
       save_into_files()
   end
   #+end_src

** Create autocommand to add custom keymaps / actions
   :PROPERTIES:
   :TANGLE: lua/user/org.lua
   :END:
   In the end, we can create the autocommand that will add this keymap 
   every time a buffer with an Org document is found.

   #+begin_src lua
   vim.api.nvim_create_autocmd("FileType", {
       pattern = "org",
       callback = function()
           vim.api.nvim_buf_set_keymap( 0, 'n', "<cr>", "", {
               callback = function ()
                   toggle_org_item()
               end,
               noremap = true
           })

           vim.api.nvim_buf_set_keymap( 0, 'n', "<leader>oxt", "", {
               callback = function ()
                   get_code_from_org()
               end,
               noremap = true
           })
       end
   })
   #+end_src

